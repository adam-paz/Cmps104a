Terminals unused in grammar

   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ROOT
   TOK_VARDECL
   TOK_IDENTDECL
   TOK_DECLID
   TOK_NEWSTRING
   TOK_RETURNVOID
   TOK_INDEX
   TOK_PROTOTYPE
   TOK_FUNCTION
   TOK_PARAMLIST


State 61 conflicts: 14 shift/reduce
State 62 conflicts: 14 shift/reduce


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ')'
    7        | program error ';'
    8        | /* empty */

    9 structdef: strfield '}'

   10 strfield: strfield fielddecl ';'
   11         | TOK_STRUCT TOK_IDENT '{'

   12 fielddecl: basetype TOK_ARRAY TOK_IDENT
   13          | basetype TOK_IDENT

   14 basetype: TOK_VOID
   15         | TOK_BOOL
   16         | TOK_CHAR
   17         | TOK_INT
   18         | TOK_STRING
   19         | TOK_IDENT

   20 function: identdecl funcargs ')' block
   21         | identdecl funcargs ')' ';'

   22 funcargs: funcargs ',' identdecl
   23         | '(' identdecl
   24         | '('

   25 identdecl: basetype TOK_IDENT
   26          | basetype TOK_ARRAY TOK_IDENT

   27 block: blockstmnts '}'

   28 blockstmnts: blockstmnts statement
   29            | '{'

   30 statement: block
   31          | ';'
   32          | vardecl
   33          | while
   34          | ifelse
   35          | return
   36          | expr ';'

   37 vardecl: identdecl '=' expr ';'

   38 while: TOK_WHILE '(' expr ')' statement

   39 ifelse: TOK_IF '(' expr ')' statement
   40       | TOK_IF '(' expr ')' statement TOK_ELSE statement

   41 return: TOK_RETURN ';'
   42       | TOK_RETURN expr ';'

   43 expr: expr '=' expr
   44     | expr TOK_EQ expr
   45     | expr TOK_NE expr
   46     | expr TOK_LT expr
   47     | expr TOK_LE expr
   48     | expr TOK_GT expr
   49     | expr TOK_GE expr
   50     | expr '+' expr
   51     | expr '-' expr
   52     | expr '*' expr
   53     | expr '/' expr
   54     | expr '%' expr
   55     | '+' expr
   56     | '-' expr
   57     | '!' expr
   58     | TOK_ORD expr
   59     | TOK_CHR expr
   60     | allocator
   61     | call
   62     | '(' expr ')'
   63     | variable
   64     | constant

   65 allocator: TOK_NEW TOK_IDENT '(' ')'
   66          | TOK_NEW TOK_STRING '(' expr ')'
   67          | TOK_NEW basetype '[' expr ']'

   68 call: callargs ')'
   69     | TOK_IDENT '(' ')'

   70 callargs: callargs ',' expr
   71         | TOK_IDENT '(' expr

   72 variable: TOK_IDENT
   73         | expr '[' expr ']'
   74         | expr '.' TOK_IDENT

   75 constant: TOK_INTCON
   76         | TOK_CHARCON
   77         | TOK_STRINGCON
   78         | TOK_FALSE
   79         | TOK_TRUE
   80         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 57
'%' (37) 54
'(' (40) 23 24 38 39 40 62 65 66 69 71
')' (41) 6 20 21 38 39 40 62 65 66 68 69
'*' (42) 52
'+' (43) 50 55
',' (44) 22 70
'-' (45) 51 56
'.' (46) 74
'/' (47) 53
';' (59) 7 10 21 31 36 37 41 42
'=' (61) 37 43
'[' (91) 67 73
']' (93) 67 73
'{' (123) 11 29
'}' (125) 5 9 27
error (256) 5 6 7
TOK_VOID (258) 14
TOK_CHAR (259) 16
TOK_INT (260) 17
TOK_STRING (261) 18 66
TOK_IF (262) 39 40
TOK_ELSE (263) 40
TOK_WHILE (264) 38
TOK_RETURN (265) 41 42
TOK_STRUCT (266) 11
TOK_NULL (267) 80
TOK_NEW (268) 65 66 67
TOK_ARRAY (269) 12 26
TOK_EQ (270) 44
TOK_NE (271) 45
TOK_LT (272) 46
TOK_LE (273) 47
TOK_GT (274) 48
TOK_GE (275) 49
TOK_IDENT (276) 11 12 13 19 25 26 65 69 71 72 74
TOK_INTCON (277) 75
TOK_CHARCON (278) 76
TOK_STRINGCON (279) 77
TOK_BLOCK (280)
TOK_CALL (281)
TOK_IFELSE (282)
TOK_INITDECL (283)
TOK_POS (284)
TOK_NEG (285)
TOK_NEWARRAY (286)
TOK_TYPEID (287)
TOK_FIELD (288)
TOK_ORD (289) 58
TOK_CHR (290) 59
TOK_ROOT (291)
TOK_VARDECL (292)
TOK_IDENTDECL (293)
TOK_BOOL (294) 15
TOK_DECLID (295)
TOK_FALSE (296) 78
TOK_TRUE (297) 79
TOK_NEWSTRING (298)
TOK_RETURNVOID (299)
TOK_INDEX (300)
TOK_PROTOTYPE (301)
TOK_FUNCTION (302)
TOK_PARAMLIST (303)


Nonterminals, with rules where they appear

$accept (65)
    on left: 0
start (66)
    on left: 1, on right: 0
program (67)
    on left: 2 3 4 5 6 7 8, on right: 1 2 3 4 5 6 7
structdef (68)
    on left: 9, on right: 2
strfield (69)
    on left: 10 11, on right: 9 10
fielddecl (70)
    on left: 12 13, on right: 10
basetype (71)
    on left: 14 15 16 17 18 19, on right: 12 13 25 26 67
function (72)
    on left: 20 21, on right: 3
funcargs (73)
    on left: 22 23 24, on right: 20 21 22
identdecl (74)
    on left: 25 26, on right: 20 21 22 23 37
block (75)
    on left: 27, on right: 20 30
blockstmnts (76)
    on left: 28 29, on right: 27 28
statement (77)
    on left: 30 31 32 33 34 35 36, on right: 4 28 38 39 40
vardecl (78)
    on left: 37, on right: 32
while (79)
    on left: 38, on right: 33
ifelse (80)
    on left: 39 40, on right: 34
return (81)
    on left: 41 42, on right: 35
expr (82)
    on left: 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60
    61 62 63 64, on right: 36 37 38 39 40 42 43 44 45 46 47 48 49 50
    51 52 53 54 55 56 57 58 59 62 66 67 70 71 73 74
allocator (83)
    on left: 65 66 67, on right: 60
call (84)
    on left: 68 69, on right: 61
callargs (85)
    on left: 70 71, on right: 68 70
variable (86)
    on left: 72 73 74, on right: 63
constant (87)
    on left: 75 76 77 78 79 80, on right: 64


State 0

    0 $accept: . start $end

    $default  reduce using rule 8 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ')'
    7        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_STRUCT     shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_BOOL       shift, and go to state 21
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    $end  reduce using rule 1 (start)

    structdef    go to state 30
    strfield     go to state 31
    basetype     go to state 32
    function     go to state 33
    identdecl    go to state 34
    block        go to state 35
    blockstmnts  go to state 36
    statement    go to state 37
    vardecl      go to state 38
    while        go to state 39
    ifelse       go to state 40
    return       go to state 41
    expr         go to state 42
    allocator    go to state 43
    call         go to state 44
    callargs     go to state 45
    variable     go to state 46
    constant     go to state 47


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ')'
    7        | program error . ';'

    '}'  shift, and go to state 48
    ')'  shift, and go to state 49
    ';'  shift, and go to state 50


State 5

   14 basetype: TOK_VOID .

    $default  reduce using rule 14 (basetype)


State 6

   16 basetype: TOK_CHAR .

    $default  reduce using rule 16 (basetype)


State 7

   17 basetype: TOK_INT .

    $default  reduce using rule 17 (basetype)


State 8

   18 basetype: TOK_STRING .

    $default  reduce using rule 18 (basetype)


State 9

   39 ifelse: TOK_IF . '(' expr ')' statement
   40       | TOK_IF . '(' expr ')' statement TOK_ELSE statement

    '('  shift, and go to state 51


State 10

   38 while: TOK_WHILE . '(' expr ')' statement

    '('  shift, and go to state 52


State 11

   41 return: TOK_RETURN . ';'
   42       | TOK_RETURN . expr ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 54

    expr       go to state 55
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 12

   11 strfield: TOK_STRUCT . TOK_IDENT '{'

    TOK_IDENT  shift, and go to state 56


State 13

   80 constant: TOK_NULL .

    $default  reduce using rule 80 (constant)


State 14

   65 allocator: TOK_NEW . TOK_IDENT '(' ')'
   66          | TOK_NEW . TOK_STRING '(' expr ')'
   67          | TOK_NEW . basetype '[' expr ']'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 57
    TOK_IDENT   shift, and go to state 58
    TOK_BOOL    shift, and go to state 21

    basetype  go to state 59


State 15

   19 basetype: TOK_IDENT .
   69 call: TOK_IDENT . '(' ')'
   71 callargs: TOK_IDENT . '(' expr
   72 variable: TOK_IDENT .

    '('  shift, and go to state 60

    TOK_ARRAY  reduce using rule 19 (basetype)
    TOK_IDENT  reduce using rule 19 (basetype)
    $default   reduce using rule 72 (variable)


State 16

   75 constant: TOK_INTCON .

    $default  reduce using rule 75 (constant)


State 17

   76 constant: TOK_CHARCON .

    $default  reduce using rule 76 (constant)


State 18

   77 constant: TOK_STRINGCON .

    $default  reduce using rule 77 (constant)


State 19

   58 expr: TOK_ORD . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 61
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 20

   59 expr: TOK_CHR . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 62
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 21

   15 basetype: TOK_BOOL .

    $default  reduce using rule 15 (basetype)


State 22

   78 constant: TOK_FALSE .

    $default  reduce using rule 78 (constant)


State 23

   79 constant: TOK_TRUE .

    $default  reduce using rule 79 (constant)


State 24

   55 expr: '+' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 63
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 25

   56 expr: '-' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 64
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 26

   57 expr: '!' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 65
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 27

   62 expr: '(' . expr ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 66
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 28

   31 statement: ';' .

    $default  reduce using rule 31 (statement)


State 29

   29 blockstmnts: '{' .

    $default  reduce using rule 29 (blockstmnts)


State 30

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 31

    9 structdef: strfield . '}'
   10 strfield: strfield . fielddecl ';'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 67
    TOK_BOOL    shift, and go to state 21
    '}'         shift, and go to state 68

    fielddecl  go to state 69
    basetype   go to state 70


State 32

   25 identdecl: basetype . TOK_IDENT
   26          | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 71
    TOK_IDENT  shift, and go to state 72


State 33

    3 program: program function .

    $default  reduce using rule 3 (program)


State 34

   20 function: identdecl . funcargs ')' block
   21         | identdecl . funcargs ')' ';'
   37 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 73
    '('  shift, and go to state 74

    funcargs  go to state 75


State 35

   30 statement: block .

    $default  reduce using rule 30 (statement)


State 36

   27 block: blockstmnts . '}'
   28 blockstmnts: blockstmnts . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_BOOL       shift, and go to state 21
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    '}'            shift, and go to state 76
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype     go to state 32
    identdecl    go to state 77
    block        go to state 35
    blockstmnts  go to state 36
    statement    go to state 78
    vardecl      go to state 38
    while        go to state 39
    ifelse       go to state 40
    return       go to state 41
    expr         go to state 42
    allocator    go to state 43
    call         go to state 44
    callargs     go to state 45
    variable     go to state 46
    constant     go to state 47


State 37

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 38

   32 statement: vardecl .

    $default  reduce using rule 32 (statement)


State 39

   33 statement: while .

    $default  reduce using rule 33 (statement)


State 40

   34 statement: ifelse .

    $default  reduce using rule 34 (statement)


State 41

   35 statement: return .

    $default  reduce using rule 35 (statement)


State 42

   36 statement: expr . ';'
   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ';'     shift, and go to state 93


State 43

   60 expr: allocator .

    $default  reduce using rule 60 (expr)


State 44

   61 expr: call .

    $default  reduce using rule 61 (expr)


State 45

   68 call: callargs . ')'
   70 callargs: callargs . ',' expr

    ')'  shift, and go to state 94
    ','  shift, and go to state 95


State 46

   63 expr: variable .

    $default  reduce using rule 63 (expr)


State 47

   64 expr: constant .

    $default  reduce using rule 64 (expr)


State 48

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 49

    6 program: program error ')' .

    $default  reduce using rule 6 (program)


State 50

    7 program: program error ';' .

    $default  reduce using rule 7 (program)


State 51

   39 ifelse: TOK_IF '(' . expr ')' statement
   40       | TOK_IF '(' . expr ')' statement TOK_ELSE statement

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 96
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 52

   38 while: TOK_WHILE '(' . expr ')' statement

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 97
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 53

   69 call: TOK_IDENT . '(' ')'
   71 callargs: TOK_IDENT . '(' expr
   72 variable: TOK_IDENT .

    '('  shift, and go to state 60

    $default  reduce using rule 72 (variable)


State 54

   41 return: TOK_RETURN ';' .

    $default  reduce using rule 41 (return)


State 55

   42 return: TOK_RETURN expr . ';'
   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ';'     shift, and go to state 98


State 56

   11 strfield: TOK_STRUCT TOK_IDENT . '{'

    '{'  shift, and go to state 99


State 57

   18 basetype: TOK_STRING .
   66 allocator: TOK_NEW TOK_STRING . '(' expr ')'

    '('  shift, and go to state 100

    $default  reduce using rule 18 (basetype)


State 58

   19 basetype: TOK_IDENT .
   65 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 101

    $default  reduce using rule 19 (basetype)


State 59

   67 allocator: TOK_NEW basetype . '[' expr ']'

    '['  shift, and go to state 102


State 60

   69 call: TOK_IDENT '(' . ')'
   71 callargs: TOK_IDENT '(' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ')'            shift, and go to state 103

    expr       go to state 104
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 61

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   58     | TOK_ORD expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92

    TOK_EQ    [reduce using rule 58 (expr)]
    TOK_NE    [reduce using rule 58 (expr)]
    TOK_LT    [reduce using rule 58 (expr)]
    TOK_LE    [reduce using rule 58 (expr)]
    TOK_GT    [reduce using rule 58 (expr)]
    TOK_GE    [reduce using rule 58 (expr)]
    '='       [reduce using rule 58 (expr)]
    '+'       [reduce using rule 58 (expr)]
    '-'       [reduce using rule 58 (expr)]
    '*'       [reduce using rule 58 (expr)]
    '/'       [reduce using rule 58 (expr)]
    '%'       [reduce using rule 58 (expr)]
    '['       [reduce using rule 58 (expr)]
    '.'       [reduce using rule 58 (expr)]
    $default  reduce using rule 58 (expr)


State 62

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   59     | TOK_CHR expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92

    TOK_EQ    [reduce using rule 59 (expr)]
    TOK_NE    [reduce using rule 59 (expr)]
    TOK_LT    [reduce using rule 59 (expr)]
    TOK_LE    [reduce using rule 59 (expr)]
    TOK_GT    [reduce using rule 59 (expr)]
    TOK_GE    [reduce using rule 59 (expr)]
    '='       [reduce using rule 59 (expr)]
    '+'       [reduce using rule 59 (expr)]
    '-'       [reduce using rule 59 (expr)]
    '*'       [reduce using rule 59 (expr)]
    '/'       [reduce using rule 59 (expr)]
    '%'       [reduce using rule 59 (expr)]
    '['       [reduce using rule 59 (expr)]
    '.'       [reduce using rule 59 (expr)]
    $default  reduce using rule 59 (expr)


State 63

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   55     | '+' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 55 (expr)


State 64

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   56     | '-' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 56 (expr)


State 65

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   57     | '!' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 57 (expr)


State 66

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   62     | '(' expr . ')'
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ')'     shift, and go to state 105


State 67

   19 basetype: TOK_IDENT .

    $default  reduce using rule 19 (basetype)


State 68

    9 structdef: strfield '}' .

    $default  reduce using rule 9 (structdef)


State 69

   10 strfield: strfield fielddecl . ';'

    ';'  shift, and go to state 106


State 70

   12 fielddecl: basetype . TOK_ARRAY TOK_IDENT
   13          | basetype . TOK_IDENT

    TOK_ARRAY  shift, and go to state 107
    TOK_IDENT  shift, and go to state 108


State 71

   26 identdecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 109


State 72

   25 identdecl: basetype TOK_IDENT .

    $default  reduce using rule 25 (identdecl)


State 73

   37 vardecl: identdecl '=' . expr ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 110
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 74

   23 funcargs: '(' . identdecl
   24         | '(' .

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 67
    TOK_BOOL    shift, and go to state 21

    $default  reduce using rule 24 (funcargs)

    basetype   go to state 32
    identdecl  go to state 111


State 75

   20 function: identdecl funcargs . ')' block
   21         | identdecl funcargs . ')' ';'
   22 funcargs: funcargs . ',' identdecl

    ')'  shift, and go to state 112
    ','  shift, and go to state 113


State 76

   27 block: blockstmnts '}' .

    $default  reduce using rule 27 (block)


State 77

   37 vardecl: identdecl . '=' expr ';'

    '='  shift, and go to state 73


State 78

   28 blockstmnts: blockstmnts statement .

    $default  reduce using rule 28 (blockstmnts)


State 79

   44 expr: expr TOK_EQ . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 114
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 80

   45 expr: expr TOK_NE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 115
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 81

   46 expr: expr TOK_LT . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 116
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 82

   47 expr: expr TOK_LE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 117
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 83

   48 expr: expr TOK_GT . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 118
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 84

   49 expr: expr TOK_GE . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 119
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 85

   43 expr: expr '=' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 120
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 86

   50 expr: expr '+' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 121
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 87

   51 expr: expr '-' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 122
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 88

   52 expr: expr '*' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 123
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 89

   53 expr: expr '/' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 124
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 90

   54 expr: expr '%' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 125
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 91

   73 variable: expr '[' . expr ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 126
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 92

   74 variable: expr '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 127


State 93

   36 statement: expr ';' .

    $default  reduce using rule 36 (statement)


State 94

   68 call: callargs ')' .

    $default  reduce using rule 68 (call)


State 95

   70 callargs: callargs ',' . expr

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 128
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 96

   39 ifelse: TOK_IF '(' expr . ')' statement
   40       | TOK_IF '(' expr . ')' statement TOK_ELSE statement
   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ')'     shift, and go to state 129


State 97

   38 while: TOK_WHILE '(' expr . ')' statement
   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ')'     shift, and go to state 130


State 98

   42 return: TOK_RETURN expr ';' .

    $default  reduce using rule 42 (return)


State 99

   11 strfield: TOK_STRUCT TOK_IDENT '{' .

    $default  reduce using rule 11 (strfield)


State 100

   66 allocator: TOK_NEW TOK_STRING '(' . expr ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 131
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 101

   65 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 132


State 102

   67 allocator: TOK_NEW basetype '[' . expr ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 53
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27

    expr       go to state 133
    allocator  go to state 43
    call       go to state 44
    callargs   go to state 45
    variable   go to state 46
    constant   go to state 47


State 103

   69 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 69 (call)


State 104

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   71 callargs: TOK_IDENT '(' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92

    $default  reduce using rule 71 (callargs)


State 105

   62 expr: '(' expr ')' .

    $default  reduce using rule 62 (expr)


State 106

   10 strfield: strfield fielddecl ';' .

    $default  reduce using rule 10 (strfield)


State 107

   12 fielddecl: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 134


State 108

   13 fielddecl: basetype TOK_IDENT .

    $default  reduce using rule 13 (fielddecl)


State 109

   26 identdecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 26 (identdecl)


State 110

   37 vardecl: identdecl '=' expr . ';'
   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ';'     shift, and go to state 135


State 111

   23 funcargs: '(' identdecl .

    $default  reduce using rule 23 (funcargs)


State 112

   20 function: identdecl funcargs ')' . block
   21         | identdecl funcargs ')' . ';'

    ';'  shift, and go to state 136
    '{'  shift, and go to state 29

    block        go to state 137
    blockstmnts  go to state 36


State 113

   22 funcargs: funcargs ',' . identdecl

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 67
    TOK_BOOL    shift, and go to state 21

    basetype   go to state 32
    identdecl  go to state 138


State 114

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   44     | expr TOK_EQ expr .
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 44 (expr)


State 115

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   45     | expr TOK_NE expr .
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 45 (expr)


State 116

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   46     | expr TOK_LT expr .
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 46 (expr)


State 117

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   47     | expr TOK_LE expr .
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 47 (expr)


State 118

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   48     | expr TOK_GT expr .
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 48 (expr)


State 119

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   49     | expr TOK_GE expr .
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 49 (expr)


State 120

   43 expr: expr . '=' expr
   43     | expr '=' expr .
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92

    $default  reduce using rule 43 (expr)


State 121

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   50     | expr '+' expr .
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 50 (expr)


State 122

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   51     | expr '-' expr .
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90
    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 51 (expr)


State 123

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   52     | expr '*' expr .
   53     | expr . '/' expr
   54     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 52 (expr)


State 124

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   53     | expr '/' expr .
   54     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 53 (expr)


State 125

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   54     | expr '%' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    '['  shift, and go to state 91
    '.'  shift, and go to state 92

    $default  reduce using rule 54 (expr)


State 126

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   73 variable: expr . '[' expr ']'
   73         | expr '[' expr . ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ']'     shift, and go to state 139


State 127

   74 variable: expr '.' TOK_IDENT .

    $default  reduce using rule 74 (variable)


State 128

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   70 callargs: callargs ',' expr .
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92

    $default  reduce using rule 70 (callargs)


State 129

   39 ifelse: TOK_IF '(' expr ')' . statement
   40       | TOK_IF '(' expr ')' . statement TOK_ELSE statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_BOOL       shift, and go to state 21
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype     go to state 32
    identdecl    go to state 77
    block        go to state 35
    blockstmnts  go to state 36
    statement    go to state 140
    vardecl      go to state 38
    while        go to state 39
    ifelse       go to state 40
    return       go to state 41
    expr         go to state 42
    allocator    go to state 43
    call         go to state 44
    callargs     go to state 45
    variable     go to state 46
    constant     go to state 47


State 130

   38 while: TOK_WHILE '(' expr ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_BOOL       shift, and go to state 21
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype     go to state 32
    identdecl    go to state 77
    block        go to state 35
    blockstmnts  go to state 36
    statement    go to state 141
    vardecl      go to state 38
    while        go to state 39
    ifelse       go to state 40
    return       go to state 41
    expr         go to state 42
    allocator    go to state 43
    call         go to state 44
    callargs     go to state 45
    variable     go to state 46
    constant     go to state 47


State 131

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   66 allocator: TOK_NEW TOK_STRING '(' expr . ')'
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ')'     shift, and go to state 142


State 132

   65 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 65 (allocator)


State 133

   43 expr: expr . '=' expr
   44     | expr . TOK_EQ expr
   45     | expr . TOK_NE expr
   46     | expr . TOK_LT expr
   47     | expr . TOK_LE expr
   48     | expr . TOK_GT expr
   49     | expr . TOK_GE expr
   50     | expr . '+' expr
   51     | expr . '-' expr
   52     | expr . '*' expr
   53     | expr . '/' expr
   54     | expr . '%' expr
   67 allocator: TOK_NEW basetype '[' expr . ']'
   73 variable: expr . '[' expr ']'
   74         | expr . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '='     shift, and go to state 85
    '+'     shift, and go to state 86
    '-'     shift, and go to state 87
    '*'     shift, and go to state 88
    '/'     shift, and go to state 89
    '%'     shift, and go to state 90
    '['     shift, and go to state 91
    '.'     shift, and go to state 92
    ']'     shift, and go to state 143


State 134

   12 fielddecl: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 12 (fielddecl)


State 135

   37 vardecl: identdecl '=' expr ';' .

    $default  reduce using rule 37 (vardecl)


State 136

   21 function: identdecl funcargs ')' ';' .

    $default  reduce using rule 21 (function)


State 137

   20 function: identdecl funcargs ')' block .

    $default  reduce using rule 20 (function)


State 138

   22 funcargs: funcargs ',' identdecl .

    $default  reduce using rule 22 (funcargs)


State 139

   73 variable: expr '[' expr ']' .

    $default  reduce using rule 73 (variable)


State 140

   39 ifelse: TOK_IF '(' expr ')' statement .
   40       | TOK_IF '(' expr ')' statement . TOK_ELSE statement

    TOK_ELSE  shift, and go to state 144

    $default  reduce using rule 39 (ifelse)


State 141

   38 while: TOK_WHILE '(' expr ')' statement .

    $default  reduce using rule 38 (while)


State 142

   66 allocator: TOK_NEW TOK_STRING '(' expr ')' .

    $default  reduce using rule 66 (allocator)


State 143

   67 allocator: TOK_NEW basetype '[' expr ']' .

    $default  reduce using rule 67 (allocator)


State 144

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_ORD        shift, and go to state 19
    TOK_CHR        shift, and go to state 20
    TOK_BOOL       shift, and go to state 21
    TOK_FALSE      shift, and go to state 22
    TOK_TRUE       shift, and go to state 23
    '+'            shift, and go to state 24
    '-'            shift, and go to state 25
    '!'            shift, and go to state 26
    '('            shift, and go to state 27
    ';'            shift, and go to state 28
    '{'            shift, and go to state 29

    basetype     go to state 32
    identdecl    go to state 77
    block        go to state 35
    blockstmnts  go to state 36
    statement    go to state 145
    vardecl      go to state 38
    while        go to state 39
    ifelse       go to state 40
    return       go to state 41
    expr         go to state 42
    allocator    go to state 43
    call         go to state 44
    callargs     go to state 45
    variable     go to state 46
    constant     go to state 47


State 145

   40 ifelse: TOK_IF '(' expr ')' statement TOK_ELSE statement .

    $default  reduce using rule 40 (ifelse)
