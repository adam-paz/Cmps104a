Terminals unused in grammar

   TOK_BLOCK
   TOK_CALL
   TOK_IFELSE
   TOK_INITDECL
   TOK_NEWARRAY
   TOK_TYPEID
   TOK_FIELD
   TOK_ORD
   TOK_CHR
   TOK_ROOT
   ROOT
   IDENT
   TOK_FUNCTION
   TOK_PARAMLIST
   TOK_PROTOTYPE
   TOK_NEWSTRING
   TOK_INDEX
   TOK_DECLID
   TOK_RETURNVOID
   TOK_VARDECLAR
   '%'


Grammar

    0 $accept: start $end

    1 start: program

    2 program: program structdef
    3        | program function
    4        | program statement
    5        | program error '}'
    6        | program error ';'
    7        | /* empty */

    8 structdef: TOK_STRUCT TOK_IDENT strfield '}'
    9          | TOK_STRUCT TOK_IDENT '{' '}'

   10 strfield: '{' fielddec ';'
   11         | strfield fielddec ';'

   12 fielddec: basetype TOK_IDENT
   13         | basetype TOK_ARRAY TOK_IDENT

   14 basetype: TOK_VOID
   15         | TOK_CHAR
   16         | TOK_INT
   17         | TOK_STRING
   18         | TOK_IDENT

   19 plist: '(' identdec
   20      | plist ',' identdec

   21 function: identdec plist ')' block
   22         | identdec plist ')' ';'
   23         | identdec '(' ')' block
   24         | identdec '(' ')' ';'

   25 identdec: basetype TOK_IDENT
   26         | basetype TOK_ARRAY TOK_IDENT

   27 body: '{' statement
   28     | body statement

   29 block: body '}'
   30      | '{' '}'

   31 statement: block
   32          | vardec
   33          | while
   34          | ifelse
   35          | return
   36          | exp ';'
   37          | ';'

   38 vardec: identdec '=' exp ';'

   39 while: TOK_WHILE '(' exp ')' statement

   40 ifelse: TOK_IF '(' exp ')' statement TOK_ELSE statement
   41       | TOK_IF '(' exp ')' statement

   42 return: TOK_RETURN ';'
   43       | TOK_RETURN exp ';'

   44 exp: binop
   45    | unop
   46    | allocator
   47    | call
   48    | '(' exp ')'
   49    | variable
   50    | constant

   51 binop: exp TOK_EQ exp
   52      | exp TOK_NE exp
   53      | exp TOK_LT exp
   54      | exp TOK_LE exp
   55      | exp TOK_GT exp
   56      | exp TOK_GE exp
   57      | exp '+' exp
   58      | exp '-' exp
   59      | exp '*' exp
   60      | exp '/' exp
   61      | exp '=' exp

   62 unop: TOK_POS exp
   63     | TOK_NEG exp
   64     | '!' exp

   65 allocator: TOK_NEW TOK_IDENT '(' ')'
   66          | TOK_NEW TOK_STRING '(' exp ')'
   67          | TOK_NEW basetype '[' exp ']'

   68 cexp: TOK_IDENT '(' exp
   69     | cexp ',' exp

   70 call: cexp ')'
   71     | TOK_IDENT '(' ')'

   72 variable: TOK_IDENT
   73         | exp '[' exp ']'
   74         | exp '.' TOK_IDENT

   75 constant: TOK_INTCON
   76         | TOK_CHARCON
   77         | TOK_STRINGCON
   78         | TOK_NULL


Terminals, with rules where they appear

$end (0) 0
'!' (33) 64
'%' (37)
'(' (40) 19 23 24 39 40 41 48 65 66 68 71
')' (41) 21 22 23 24 39 40 41 48 65 66 70 71
'*' (42) 59
'+' (43) 57
',' (44) 20 69
'-' (45) 58
'.' (46) 74
'/' (47) 60
';' (59) 6 10 11 22 24 36 37 38 42 43
'=' (61) 38 61
'[' (91) 67 73
']' (93) 67 73
'{' (123) 9 10 27 30
'}' (125) 5 8 9 29 30
error (256) 5 6
TOK_VOID (258) 14
TOK_CHAR (259) 15
TOK_INT (260) 16
TOK_STRING (261) 17 66
TOK_IF (262) 40 41
TOK_ELSE (263) 40
TOK_WHILE (264) 39
TOK_RETURN (265) 42 43
TOK_STRUCT (266) 8 9
TOK_NULL (267) 78
TOK_NEW (268) 65 66 67
TOK_ARRAY (269) 13 26
TOK_EQ (270) 51
TOK_NE (271) 52
TOK_LT (272) 53
TOK_LE (273) 54
TOK_GT (274) 55
TOK_GE (275) 56
TOK_IDENT (276) 8 9 12 13 18 25 26 65 68 71 72 74
TOK_INTCON (277) 75
TOK_CHARCON (278) 76
TOK_STRINGCON (279) 77
TOK_BLOCK (280)
TOK_CALL (281)
TOK_IFELSE (282)
TOK_INITDECL (283)
TOK_POS (284) 62
TOK_NEG (285) 63
TOK_NEWARRAY (286)
TOK_TYPEID (287)
TOK_FIELD (288)
TOK_ORD (289)
TOK_CHR (290)
TOK_ROOT (291)
ROOT (292)
IDENT (293)
TOK_FUNCTION (294)
TOK_PARAMLIST (295)
TOK_PROTOTYPE (296)
TOK_NEWSTRING (297)
TOK_INDEX (298)
TOK_DECLID (299)
TOK_RETURNVOID (300)
TOK_VARDECLAR (301)


Nonterminals, with rules where they appear

$accept (63)
    on left: 0
start (64)
    on left: 1, on right: 0
program (65)
    on left: 2 3 4 5 6 7, on right: 1 2 3 4 5 6
structdef (66)
    on left: 8 9, on right: 2
strfield (67)
    on left: 10 11, on right: 8 11
fielddec (68)
    on left: 12 13, on right: 10 11
basetype (69)
    on left: 14 15 16 17 18, on right: 12 13 25 26 67
plist (70)
    on left: 19 20, on right: 20 21 22
function (71)
    on left: 21 22 23 24, on right: 3
identdec (72)
    on left: 25 26, on right: 19 20 21 22 23 24 38
body (73)
    on left: 27 28, on right: 28 29
block (74)
    on left: 29 30, on right: 21 23 31
statement (75)
    on left: 31 32 33 34 35 36 37, on right: 4 27 28 39 40 41
vardec (76)
    on left: 38, on right: 32
while (77)
    on left: 39, on right: 33
ifelse (78)
    on left: 40 41, on right: 34
return (79)
    on left: 42 43, on right: 35
exp (80)
    on left: 44 45 46 47 48 49 50, on right: 36 38 39 40 41 43 48 51
    52 53 54 55 56 57 58 59 60 61 62 63 64 66 67 68 69 73 74
binop (81)
    on left: 51 52 53 54 55 56 57 58 59 60 61, on right: 44
unop (82)
    on left: 62 63 64, on right: 45
allocator (83)
    on left: 65 66 67, on right: 46
cexp (84)
    on left: 68 69, on right: 69 70
call (85)
    on left: 70 71, on right: 47
variable (86)
    on left: 72 73 74, on right: 49
constant (87)
    on left: 75 76 77 78, on right: 50


State 0

    0 $accept: . start $end

    $default  reduce using rule 7 (program)

    start    go to state 1
    program  go to state 2


State 1

    0 $accept: start . $end

    $end  shift, and go to state 3


State 2

    1 start: program .
    2 program: program . structdef
    3        | program . function
    4        | program . statement
    5        | program . error '}'
    6        | program . error ';'

    error          shift, and go to state 4
    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_STRUCT     shift, and go to state 12
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    $end  reduce using rule 1 (start)

    structdef  go to state 25
    basetype   go to state 26
    function   go to state 27
    identdec   go to state 28
    body       go to state 29
    block      go to state 30
    statement  go to state 31
    vardec     go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    exp        go to state 36
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 3

    0 $accept: start $end .

    $default  accept


State 4

    5 program: program error . '}'
    6        | program error . ';'

    '}'  shift, and go to state 44
    ';'  shift, and go to state 45


State 5

   14 basetype: TOK_VOID .

    $default  reduce using rule 14 (basetype)


State 6

   15 basetype: TOK_CHAR .

    $default  reduce using rule 15 (basetype)


State 7

   16 basetype: TOK_INT .

    $default  reduce using rule 16 (basetype)


State 8

   17 basetype: TOK_STRING .

    $default  reduce using rule 17 (basetype)


State 9

   40 ifelse: TOK_IF . '(' exp ')' statement TOK_ELSE statement
   41       | TOK_IF . '(' exp ')' statement

    '('  shift, and go to state 46


State 10

   39 while: TOK_WHILE . '(' exp ')' statement

    '('  shift, and go to state 47


State 11

   42 return: TOK_RETURN . ';'
   43       | TOK_RETURN . exp ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    ';'            shift, and go to state 49
    '('            shift, and go to state 24

    exp        go to state 50
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 12

    8 structdef: TOK_STRUCT . TOK_IDENT strfield '}'
    9          | TOK_STRUCT . TOK_IDENT '{' '}'

    TOK_IDENT  shift, and go to state 51


State 13

   78 constant: TOK_NULL .

    $default  reduce using rule 78 (constant)


State 14

   65 allocator: TOK_NEW . TOK_IDENT '(' ')'
   66          | TOK_NEW . TOK_STRING '(' exp ')'
   67          | TOK_NEW . basetype '[' exp ']'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 52
    TOK_IDENT   shift, and go to state 53

    basetype  go to state 54


State 15

   18 basetype: TOK_IDENT .
   68 cexp: TOK_IDENT . '(' exp
   71 call: TOK_IDENT . '(' ')'
   72 variable: TOK_IDENT .

    '('  shift, and go to state 55

    TOK_ARRAY  reduce using rule 18 (basetype)
    TOK_IDENT  reduce using rule 18 (basetype)
    $default   reduce using rule 72 (variable)


State 16

   75 constant: TOK_INTCON .

    $default  reduce using rule 75 (constant)


State 17

   76 constant: TOK_CHARCON .

    $default  reduce using rule 76 (constant)


State 18

   77 constant: TOK_STRINGCON .

    $default  reduce using rule 77 (constant)


State 19

   62 unop: TOK_POS . exp

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 56
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 20

   63 unop: TOK_NEG . exp

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 57
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 21

   64 unop: '!' . exp

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 58
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 22

   37 statement: ';' .

    $default  reduce using rule 37 (statement)


State 23

   27 body: '{' . statement
   30 block: '{' . '}'

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '}'            shift, and go to state 59
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    basetype   go to state 26
    identdec   go to state 60
    body       go to state 29
    block      go to state 30
    statement  go to state 61
    vardec     go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    exp        go to state 36
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 24

   48 exp: '(' . exp ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 62
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 25

    2 program: program structdef .

    $default  reduce using rule 2 (program)


State 26

   25 identdec: basetype . TOK_IDENT
   26         | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 63
    TOK_IDENT  shift, and go to state 64


State 27

    3 program: program function .

    $default  reduce using rule 3 (program)


State 28

   21 function: identdec . plist ')' block
   22         | identdec . plist ')' ';'
   23         | identdec . '(' ')' block
   24         | identdec . '(' ')' ';'
   38 vardec: identdec . '=' exp ';'

    '='  shift, and go to state 65
    '('  shift, and go to state 66

    plist  go to state 67


State 29

   28 body: body . statement
   29 block: body . '}'

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '}'            shift, and go to state 68
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    basetype   go to state 26
    identdec   go to state 60
    body       go to state 29
    block      go to state 30
    statement  go to state 69
    vardec     go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    exp        go to state 36
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 30

   31 statement: block .

    $default  reduce using rule 31 (statement)


State 31

    4 program: program statement .

    $default  reduce using rule 4 (program)


State 32

   32 statement: vardec .

    $default  reduce using rule 32 (statement)


State 33

   33 statement: while .

    $default  reduce using rule 33 (statement)


State 34

   34 statement: ifelse .

    $default  reduce using rule 34 (statement)


State 35

   35 statement: return .

    $default  reduce using rule 35 (statement)


State 36

   36 statement: exp . ';'
   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ';'     shift, and go to state 83


State 37

   44 exp: binop .

    $default  reduce using rule 44 (exp)


State 38

   45 exp: unop .

    $default  reduce using rule 45 (exp)


State 39

   46 exp: allocator .

    $default  reduce using rule 46 (exp)


State 40

   69 cexp: cexp . ',' exp
   70 call: cexp . ')'

    ','  shift, and go to state 84
    ')'  shift, and go to state 85


State 41

   47 exp: call .

    $default  reduce using rule 47 (exp)


State 42

   49 exp: variable .

    $default  reduce using rule 49 (exp)


State 43

   50 exp: constant .

    $default  reduce using rule 50 (exp)


State 44

    5 program: program error '}' .

    $default  reduce using rule 5 (program)


State 45

    6 program: program error ';' .

    $default  reduce using rule 6 (program)


State 46

   40 ifelse: TOK_IF '(' . exp ')' statement TOK_ELSE statement
   41       | TOK_IF '(' . exp ')' statement

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 86
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 47

   39 while: TOK_WHILE '(' . exp ')' statement

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 87
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 48

   68 cexp: TOK_IDENT . '(' exp
   71 call: TOK_IDENT . '(' ')'
   72 variable: TOK_IDENT .

    '('  shift, and go to state 55

    $default  reduce using rule 72 (variable)


State 49

   42 return: TOK_RETURN ';' .

    $default  reduce using rule 42 (return)


State 50

   43 return: TOK_RETURN exp . ';'
   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ';'     shift, and go to state 88


State 51

    8 structdef: TOK_STRUCT TOK_IDENT . strfield '}'
    9          | TOK_STRUCT TOK_IDENT . '{' '}'

    '{'  shift, and go to state 89

    strfield  go to state 90


State 52

   17 basetype: TOK_STRING .
   66 allocator: TOK_NEW TOK_STRING . '(' exp ')'

    '('  shift, and go to state 91

    $default  reduce using rule 17 (basetype)


State 53

   18 basetype: TOK_IDENT .
   65 allocator: TOK_NEW TOK_IDENT . '(' ')'

    '('  shift, and go to state 92

    $default  reduce using rule 18 (basetype)


State 54

   67 allocator: TOK_NEW basetype . '[' exp ']'

    '['  shift, and go to state 93


State 55

   68 cexp: TOK_IDENT '(' . exp
   71 call: TOK_IDENT '(' . ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24
    ')'            shift, and go to state 94

    exp        go to state 95
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 56

   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   62 unop: TOK_POS exp .
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 62 (unop)


State 57

   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   63 unop: TOK_NEG exp .
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 63 (unop)


State 58

   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   64 unop: '!' exp .
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 64 (unop)


State 59

   30 block: '{' '}' .

    $default  reduce using rule 30 (block)


State 60

   38 vardec: identdec . '=' exp ';'

    '='  shift, and go to state 65


State 61

   27 body: '{' statement .

    $default  reduce using rule 27 (body)


State 62

   48 exp: '(' exp . ')'
   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ')'     shift, and go to state 96


State 63

   26 identdec: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 97


State 64

   25 identdec: basetype TOK_IDENT .

    $default  reduce using rule 25 (identdec)


State 65

   38 vardec: identdec '=' . exp ';'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 98
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 66

   19 plist: '(' . identdec
   23 function: identdec '(' . ')' block
   24         | identdec '(' . ')' ';'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 99
    ')'         shift, and go to state 100

    basetype  go to state 26
    identdec  go to state 101


State 67

   20 plist: plist . ',' identdec
   21 function: identdec plist . ')' block
   22         | identdec plist . ')' ';'

    ','  shift, and go to state 102
    ')'  shift, and go to state 103


State 68

   29 block: body '}' .

    $default  reduce using rule 29 (block)


State 69

   28 body: body statement .

    $default  reduce using rule 28 (body)


State 70

   51 binop: exp TOK_EQ . exp

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 104
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 71

   52 binop: exp TOK_NE . exp

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 105
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 72

   53 binop: exp TOK_LT . exp

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 106
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 73

   54 binop: exp TOK_LE . exp

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 107
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 74

   55 binop: exp TOK_GT . exp

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 108
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 75

   56 binop: exp TOK_GE . exp

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 109
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 76

   61 binop: exp '=' . exp

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 110
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 77

   57 binop: exp '+' . exp

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 111
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 78

   58 binop: exp '-' . exp

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 112
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 79

   59 binop: exp '*' . exp

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 113
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 80

   60 binop: exp '/' . exp

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 114
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 81

   73 variable: exp '[' . exp ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 115
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 82

   74 variable: exp '.' . TOK_IDENT

    TOK_IDENT  shift, and go to state 116


State 83

   36 statement: exp ';' .

    $default  reduce using rule 36 (statement)


State 84

   69 cexp: cexp ',' . exp

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 117
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 85

   70 call: cexp ')' .

    $default  reduce using rule 70 (call)


State 86

   40 ifelse: TOK_IF '(' exp . ')' statement TOK_ELSE statement
   41       | TOK_IF '(' exp . ')' statement
   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ')'     shift, and go to state 118


State 87

   39 while: TOK_WHILE '(' exp . ')' statement
   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ')'     shift, and go to state 119


State 88

   43 return: TOK_RETURN exp ';' .

    $default  reduce using rule 43 (return)


State 89

    9 structdef: TOK_STRUCT TOK_IDENT '{' . '}'
   10 strfield: '{' . fielddec ';'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 99
    '}'         shift, and go to state 120

    fielddec  go to state 121
    basetype  go to state 122


State 90

    8 structdef: TOK_STRUCT TOK_IDENT strfield . '}'
   11 strfield: strfield . fielddec ';'

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 99
    '}'         shift, and go to state 123

    fielddec  go to state 124
    basetype  go to state 122


State 91

   66 allocator: TOK_NEW TOK_STRING '(' . exp ')'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 125
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 92

   65 allocator: TOK_NEW TOK_IDENT '(' . ')'

    ')'  shift, and go to state 126


State 93

   67 allocator: TOK_NEW basetype '[' . exp ']'

    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 48
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    '('            shift, and go to state 24

    exp        go to state 127
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 94

   71 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 71 (call)


State 95

   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   68 cexp: TOK_IDENT '(' exp .
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82

    $default  reduce using rule 68 (cexp)


State 96

   48 exp: '(' exp ')' .

    $default  reduce using rule 48 (exp)


State 97

   26 identdec: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 26 (identdec)


State 98

   38 vardec: identdec '=' exp . ';'
   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ';'     shift, and go to state 128


State 99

   18 basetype: TOK_IDENT .

    $default  reduce using rule 18 (basetype)


State 100

   23 function: identdec '(' ')' . block
   24         | identdec '(' ')' . ';'

    ';'  shift, and go to state 129
    '{'  shift, and go to state 23

    body   go to state 29
    block  go to state 130


State 101

   19 plist: '(' identdec .

    $default  reduce using rule 19 (plist)


State 102

   20 plist: plist ',' . identdec

    TOK_VOID    shift, and go to state 5
    TOK_CHAR    shift, and go to state 6
    TOK_INT     shift, and go to state 7
    TOK_STRING  shift, and go to state 8
    TOK_IDENT   shift, and go to state 99

    basetype  go to state 26
    identdec  go to state 131


State 103

   21 function: identdec plist ')' . block
   22         | identdec plist ')' . ';'

    ';'  shift, and go to state 132
    '{'  shift, and go to state 23

    body   go to state 29
    block  go to state 133


State 104

   51 binop: exp . TOK_EQ exp
   51      | exp TOK_EQ exp .
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 51 (binop)


State 105

   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   52      | exp TOK_NE exp .
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 52 (binop)


State 106

   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   53      | exp TOK_LT exp .
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 53 (binop)


State 107

   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   54      | exp TOK_LE exp .
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 54 (binop)


State 108

   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   55      | exp TOK_GT exp .
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 55 (binop)


State 109

   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   56      | exp TOK_GE exp .
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    '+'  shift, and go to state 77
    '-'  shift, and go to state 78
    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 56 (binop)


State 110

   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   61      | exp '=' exp .
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82

    $default  reduce using rule 61 (binop)


State 111

   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   57      | exp '+' exp .
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 57 (binop)


State 112

   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   58      | exp '-' exp .
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    '*'  shift, and go to state 79
    '/'  shift, and go to state 80
    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 58 (binop)


State 113

   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   59      | exp '*' exp .
   60      | exp . '/' exp
   61      | exp . '=' exp
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 59 (binop)


State 114

   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   60      | exp '/' exp .
   61      | exp . '=' exp
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    '['  shift, and go to state 81
    '.'  shift, and go to state 82

    $default  reduce using rule 60 (binop)


State 115

   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   73 variable: exp . '[' exp ']'
   73         | exp '[' exp . ']'
   74         | exp . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ']'     shift, and go to state 134


State 116

   74 variable: exp '.' TOK_IDENT .

    $default  reduce using rule 74 (variable)


State 117

   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   69 cexp: cexp ',' exp .
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82

    $default  reduce using rule 69 (cexp)


State 118

   40 ifelse: TOK_IF '(' exp ')' . statement TOK_ELSE statement
   41       | TOK_IF '(' exp ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    basetype   go to state 26
    identdec   go to state 60
    body       go to state 29
    block      go to state 30
    statement  go to state 135
    vardec     go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    exp        go to state 36
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 119

   39 while: TOK_WHILE '(' exp ')' . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    basetype   go to state 26
    identdec   go to state 60
    body       go to state 29
    block      go to state 30
    statement  go to state 136
    vardec     go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    exp        go to state 36
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 120

    9 structdef: TOK_STRUCT TOK_IDENT '{' '}' .

    $default  reduce using rule 9 (structdef)


State 121

   10 strfield: '{' fielddec . ';'

    ';'  shift, and go to state 137


State 122

   12 fielddec: basetype . TOK_IDENT
   13         | basetype . TOK_ARRAY TOK_IDENT

    TOK_ARRAY  shift, and go to state 138
    TOK_IDENT  shift, and go to state 139


State 123

    8 structdef: TOK_STRUCT TOK_IDENT strfield '}' .

    $default  reduce using rule 8 (structdef)


State 124

   11 strfield: strfield fielddec . ';'

    ';'  shift, and go to state 140


State 125

   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   66 allocator: TOK_NEW TOK_STRING '(' exp . ')'
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ')'     shift, and go to state 141


State 126

   65 allocator: TOK_NEW TOK_IDENT '(' ')' .

    $default  reduce using rule 65 (allocator)


State 127

   51 binop: exp . TOK_EQ exp
   52      | exp . TOK_NE exp
   53      | exp . TOK_LT exp
   54      | exp . TOK_LE exp
   55      | exp . TOK_GT exp
   56      | exp . TOK_GE exp
   57      | exp . '+' exp
   58      | exp . '-' exp
   59      | exp . '*' exp
   60      | exp . '/' exp
   61      | exp . '=' exp
   67 allocator: TOK_NEW basetype '[' exp . ']'
   73 variable: exp . '[' exp ']'
   74         | exp . '.' TOK_IDENT

    TOK_EQ  shift, and go to state 70
    TOK_NE  shift, and go to state 71
    TOK_LT  shift, and go to state 72
    TOK_LE  shift, and go to state 73
    TOK_GT  shift, and go to state 74
    TOK_GE  shift, and go to state 75
    '='     shift, and go to state 76
    '+'     shift, and go to state 77
    '-'     shift, and go to state 78
    '*'     shift, and go to state 79
    '/'     shift, and go to state 80
    '['     shift, and go to state 81
    '.'     shift, and go to state 82
    ']'     shift, and go to state 142


State 128

   38 vardec: identdec '=' exp ';' .

    $default  reduce using rule 38 (vardec)


State 129

   24 function: identdec '(' ')' ';' .

    $default  reduce using rule 24 (function)


State 130

   23 function: identdec '(' ')' block .

    $default  reduce using rule 23 (function)


State 131

   20 plist: plist ',' identdec .

    $default  reduce using rule 20 (plist)


State 132

   22 function: identdec plist ')' ';' .

    $default  reduce using rule 22 (function)


State 133

   21 function: identdec plist ')' block .

    $default  reduce using rule 21 (function)


State 134

   73 variable: exp '[' exp ']' .

    $default  reduce using rule 73 (variable)


State 135

   40 ifelse: TOK_IF '(' exp ')' statement . TOK_ELSE statement
   41       | TOK_IF '(' exp ')' statement .

    TOK_ELSE  shift, and go to state 143

    $default  reduce using rule 41 (ifelse)


State 136

   39 while: TOK_WHILE '(' exp ')' statement .

    $default  reduce using rule 39 (while)


State 137

   10 strfield: '{' fielddec ';' .

    $default  reduce using rule 10 (strfield)


State 138

   13 fielddec: basetype TOK_ARRAY . TOK_IDENT

    TOK_IDENT  shift, and go to state 144


State 139

   12 fielddec: basetype TOK_IDENT .

    $default  reduce using rule 12 (fielddec)


State 140

   11 strfield: strfield fielddec ';' .

    $default  reduce using rule 11 (strfield)


State 141

   66 allocator: TOK_NEW TOK_STRING '(' exp ')' .

    $default  reduce using rule 66 (allocator)


State 142

   67 allocator: TOK_NEW basetype '[' exp ']' .

    $default  reduce using rule 67 (allocator)


State 143

   40 ifelse: TOK_IF '(' exp ')' statement TOK_ELSE . statement

    TOK_VOID       shift, and go to state 5
    TOK_CHAR       shift, and go to state 6
    TOK_INT        shift, and go to state 7
    TOK_STRING     shift, and go to state 8
    TOK_IF         shift, and go to state 9
    TOK_WHILE      shift, and go to state 10
    TOK_RETURN     shift, and go to state 11
    TOK_NULL       shift, and go to state 13
    TOK_NEW        shift, and go to state 14
    TOK_IDENT      shift, and go to state 15
    TOK_INTCON     shift, and go to state 16
    TOK_CHARCON    shift, and go to state 17
    TOK_STRINGCON  shift, and go to state 18
    TOK_POS        shift, and go to state 19
    TOK_NEG        shift, and go to state 20
    '!'            shift, and go to state 21
    ';'            shift, and go to state 22
    '{'            shift, and go to state 23
    '('            shift, and go to state 24

    basetype   go to state 26
    identdec   go to state 60
    body       go to state 29
    block      go to state 30
    statement  go to state 145
    vardec     go to state 32
    while      go to state 33
    ifelse     go to state 34
    return     go to state 35
    exp        go to state 36
    binop      go to state 37
    unop       go to state 38
    allocator  go to state 39
    cexp       go to state 40
    call       go to state 41
    variable   go to state 42
    constant   go to state 43


State 144

   13 fielddec: basetype TOK_ARRAY TOK_IDENT .

    $default  reduce using rule 13 (fielddec)


State 145

   40 ifelse: TOK_IF '(' exp ')' statement TOK_ELSE statement .

    $default  reduce using rule 40 (ifelse)
